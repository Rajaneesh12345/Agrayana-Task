{"version":3,"sources":["http-common.js","services/upload-files.service.js","components/upload-files.component.js","components/form-upload.component.js","App.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","headers","file","onUploadProgress","formData","FormData","append","http","post","get","UploadFiles","props","upload","bind","onDrop","state","selectedFiles","undefined","currentFile","progress","message","fileInfos","UploadService","getFiles","then","response","setState","data","this","event","Math","round","loaded","total","files","catch","length","console","log","className","role","style","width","getRootProps","getInputProps","name","disabled","onClick","map","index","href","url","Component","formFunction","class","action","for","type","id","placeholder","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.8f1f71de.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport default axios.create({\n  baseURL: \"http://localhost:8080\",\n  headers: {\n    \"Content-type\": \"application/json\"\n  }\n});","import http from \"../http-common\";\n\nclass UploadFilesService {\n  upload(file, onUploadProgress) {\n    let formData = new FormData();\n\n    formData.append(\"file\", file);\n\n    return http.post(\"/upload\", formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\",\n      },\n      onUploadProgress,\n    });\n  }\n\n  getFiles() {\n    return http.get(\"/files\");\n  }\n}\n\nexport default new UploadFilesService();\n","import React, { Component } from 'react'\nimport Dropzone from 'react-dropzone'\n\nimport UploadService from '../services/upload-files.service'\n\nexport default class UploadFiles extends Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.upload = this.upload.bind(this)\n\t\tthis.onDrop = this.onDrop.bind(this)\n\n\t\tthis.state = {\n\t\t\tselectedFiles: undefined,\n\t\t\tcurrentFile: undefined,\n\t\t\tprogress: 0,\n\t\t\tmessage: '',\n\t\t\tfileInfos: []\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tUploadService.getFiles().then(response => {\n\t\t\tthis.setState({\n\t\t\t\tfileInfos: response.data\n\t\t\t})\n\t\t})\n\t}\n\n\tupload() {\n\t\tlet currentFile = this.state.selectedFiles[0]\n\n\t\tthis.setState({\n\t\t\tprogress: 0,\n\t\t\tcurrentFile: currentFile\n\t\t})\n\n\t\tUploadService.upload(currentFile, event => {\n\t\t\tthis.setState({\n\t\t\t\tprogress: Math.round((100 * event.loaded) / event.total)\n\t\t\t})\n\t\t})\n\t\t\t.then(response => {\n\t\t\t\tthis.setState({\n\t\t\t\t\tmessage: response.data.message\n\t\t\t\t})\n\t\t\t\treturn UploadService.getFiles()\n\t\t\t})\n\t\t\t.then(files => {\n\t\t\t\tthis.setState({\n\t\t\t\t\tfileInfos: files.data\n\t\t\t\t})\n\t\t\t})\n\t\t\t.catch(() => {\n\t\t\t\tthis.setState({\n\t\t\t\t\tprogress: 0,\n\t\t\t\t\tmessage: 'Could not upload the file!',\n\t\t\t\t\tcurrentFile: undefined\n\t\t\t\t})\n\t\t\t})\n\n\t\tthis.setState({\n\t\t\tselectedFiles: undefined\n\t\t})\n\t}\n\n\tonDrop(files) {\n\t\tif (files.length > 0) {\n\t\t\tthis.setState({ selectedFiles: files })\n\t\t\tconsole.log(files)\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { selectedFiles, currentFile, progress, message, fileInfos } = this.state\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t{currentFile && (\n\t\t\t\t\t<div className=\"progress mb-3\">\n\t\t\t\t\t\t<div className=\"progress-bar progress-bar-info progress-bar-striped\" role=\"progressbar\" aria-valuenow={progress} aria-valuemin=\"0\" aria-valuemax=\"100\" style={{ width: progress + '%' }}>\n\t\t\t\t\t\t\t{progress}%\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\n\t\t\t\t<Dropzone onDrop={this.onDrop}>\n\t\t\t\t\t{({ getRootProps, getInputProps }) => (\n\t\t\t\t\t\t<section>\n\t\t\t\t\t\t\t<div {...getRootProps({ className: 'dropzone' })}>\n\t\t\t\t\t\t\t\t<input {...getInputProps()} />\n\t\t\t\t\t\t\t\t{selectedFiles && selectedFiles[0].name ? <div className=\"selected-file\">{selectedFiles && selectedFiles[0].name}</div> : 'Drag and drop file here, or click to select file'}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<aside className=\"selected-file-wrapper\">\n\t\t\t\t\t\t\t\t<button className=\"btn btn-success\" disabled={!selectedFiles} onClick={this.upload}>\n\t\t\t\t\t\t\t\t\tUpload\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</aside>\n\t\t\t\t\t\t</section>\n\t\t\t\t\t)}\n\t\t\t\t</Dropzone>\n\n\t\t\t\t<div className=\"alert alert-light\" role=\"alert\">\n\t\t\t\t\t{message}\n\t\t\t\t</div>\n\n\t\t\t\t{fileInfos.length > 0 && (\n\t\t\t\t\t<div className=\"card\">\n\t\t\t\t\t\t<div className=\"card-header\">List of Files</div>\n\t\t\t\t\t\t<ul className=\"list-group list-group-flush\">\n\t\t\t\t\t\t\t{fileInfos.map((file, index) => (\n\t\t\t\t\t\t\t\t<li className=\"list-group-item\" key={index}>\n\t\t\t\t\t\t\t\t\t<a href={file.url}>{file.name}</a>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t)\n\t}\n}\n","import React from 'react'\r\n\r\nfunction formFunction() {\r\n\treturn (\r\n\t\t<div class=\"container mt-3\">\r\n\t\t\t<h2>Stacked form</h2>\r\n\t\t\t<form action=\"/action_page.php\">\r\n\t\t\t\t<div class=\"mb-3 mt-3\">\r\n\t\t\t\t\t<label for=\"email\">Email:</label>\r\n\t\t\t\t\t<input type=\"email\" class=\"form-control\" id=\"email\" placeholder=\"Enter email\" name=\"email\" />\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"mb-3\">\r\n\t\t\t\t\t<label for=\"pwd\">Password:</label>\r\n\t\t\t\t\t<input type=\"password\" class=\"form-control\" id=\"pwd\" placeholder=\"Enter password\" name=\"pswd\" />\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"form-check mb-3\">\r\n\t\t\t\t\t<label class=\"form-check-label\">\r\n\t\t\t\t\t\t<input class=\"form-check-input\" type=\"checkbox\" name=\"remember\" /> Remember me\r\n\t\t\t\t\t</label>\r\n\t\t\t\t</div>\r\n\t\t\t\t<button type=\"submit\" class=\"btn btn-primary\">\r\n\t\t\t\t\tSubmit\r\n\t\t\t\t</button>\r\n\t\t\t</form>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default formFunction\r\n","import React from 'react'\nimport './App.css'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nimport UploadFiles from './components/upload-files.component'\nimport FormUpload from './components/form-upload.component'\n\nfunction App() {\n\treturn (\n\t\t<div className=\"container row flex\">\n\t\t\t<div className=\"col m-5\">\n\t\t\t\t<UploadFiles />\n\t\t\t</div>\n\t\t\t<div class=\"col m-5\">\n\t\t\t\t<FormUpload />\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}